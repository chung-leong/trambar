#!/usr/bin/node

var _ = require('lodash');
var FS = require('fs');
var Path = require('path');

process.env.NODE_PATH += `:${Path.resolve(__dirname + '/../common/node_modules')}`;
process.env.NODE_PATH += `:${Path.resolve(__dirname + '/../common/src')}`;
require('module').Module._initPaths();

require = require('esm')(module);


var locale = process.argv[2];

if (!locale) {
    console.log('locale-check <language code|"all">');
    process.exit(0);
}

var locales = [];
if (/^all$/i.test(locale)) {
    var files = FS.readdirSync(`./src/locales`);
    _.each(files, (file) => {
        if (/^[a-z]{2}\.js$/.test(file)) {
            locales.push(file.substr(0, 2));
        }
    });
} else {
    locales.push(locale);
}

function load(locale) {
    var lang = _.first(_.split(locale, '-'));
    var langModule = require(`./src/locales/${lang}`)
    var phrases = langModule.phrases;
    if (phrases instanceof Function) {
        var country =  _.last(_.split(locale, '-'));
        phrases = phrases(country);
    }
    return phrases;
}

try {
    var english = load('en-us');
    _.each(locales, (locale) => {
        var target = load(locale);

        var missing = [];
        var englishNames = _.keys(english);
        _.each(englishNames, (name) => {
            if (target[name] === undefined) {
                missing.push(name);
            }
        });

        var unknown = [];
        var targetNames = _.keys(target);
        _.each(targetNames, (name) => {
            if (english[name] === undefined) {
                unknown.push(name);
            }
        });

        var misplaced = [];
        _.each(targetNames, (name, i, list) => {
            var next = list[i + 1];
            if (next && name > next) {
                misplaced.push(name);
            }
        });

        if (missing.length > 0) {
            console.log(`${missing.length} phrases are missing from locale "${locale}":`)
            _.each(missing, (name) => {
                console.log(name);
            });
        } else if (unknown.length > 0) {
            console.log(`${unknown.length} phrases are extraneous or misnamed in locale "${locale}":`)
            _.each(unknown, (name) => {
                console.log(name);
            });
        } else if (misplaced.length> 0) {
            console.log(`${misplaced.length} phrases are out of order in locale "${locale}":`)
            _.each(misplaced, (name) => {
                console.log(name);
            });
        } else {
            console.log(`Locale "${locale}" seems to be okay`);
        }
    });
} catch(err) {
    console.error(err);
    process.exit(-1);
}
